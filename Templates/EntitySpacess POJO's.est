<% 
/*
=========================================================================
    
    EntitySpaces 2010 
    Persistence Layer and Business Objects for Microsoft .NET 
    Copyright 2005 - 2010 EntitySpaces, LLC 
    EntitySpaces(TM) is a legal trademark of EntitySpaces, LLC 
    http://www.entityspaces.net 

    This template is bound by the EntitySpaces License Agreement which 
    is located here: 

    http://www.entityspaces.net/portal/License/tabid/97/Default.aspx
    
=========================================================================
*/
%>
<%@ TemplateInfo 
    UniqueID="7CE37C5B-536D-4057-BC6B-87015D3C451F" 
	UserInterfaceID="60C6D790-E5BE-4634-B168-A89EC6965F45"
    Title="POJO's"   
    Description="The Custom Master Template" 
    Namespace="EntitySpaces.JavaScript" 
    Author="EntitySpaces, LLC"
    Version="2011.0.0.0"
    RequiresUI="True" %>
<%
string fileName = "";
string outputDirectory = (string)esMeta.Input["OutputPath"];

//===============================================================
// Execute our SubTemplates ....
//===============================================================
//System.Diagnostics.Debugger.Break();

ITable table = null;
IView  view  = null;

ArrayList entities = esMeta.Input["Entities"] as ArrayList;
string entityType = (string)esMeta.Input["EntityType"];
string databaseName = (string)esMeta.Input["Database"];

IDatabase database = esMeta.Databases[databaseName];
	
foreach(string tableOrView in entities)
{
	if(entityType == EntitySpaces.MetadataEngine.dbEntityType.Tables.ToString())
	{
		table = database.Tables[tableOrView];
		
		esMeta.Input["View"] = null;
		esMeta.Input["Table"] = table;
		esMeta.Input["Columns"] = table.Columns;
	}
	else 
	{
		view = database.Views[tableOrView];
		
		esMeta.Input["Table"] = null;
		esMeta.Input["View"] = view;	
		esMeta.Input["Columns"] = view.Columns;
	}
	
	esPluginSource source = new esPluginSource(esMeta, table, view);
	esMeta.Input["Source"] = source;
	
	//----------------------------------------
	// Begin actual template execution
	//----------------------------------------	
	string path = this.Template.Header.FilePath;%>
(function (es) { //myNS = "myNameSpace" ... for example purposes

    if (typeof (es) === undefined) {
        throw "Please Load EntitySpaces.Core First";
    }

    es.objects.<%=source.Entity%> = es.defineEntity(function () {

        // core columns<% 
	foreach(IColumn col in source.Columns)
	{
		if(!col.IsConcurrency && ! col.IsEntitySpacesConcurrency) {%>	
		this.<%=col.PropertyName%> = ko.observable(null);<%} else {%>
		this.<%=col.PropertyName%> = null;<%}}%>
		
        // extended colulmns
        this.esExtendedData = null;
    });

    //#region Routing

    es.objects.<%=source.Entity%>.prototype.routes = {
        create: { method: 'PUT', url: '/<%=source.Entity%>/Create' },
        update: { method: 'POST', url: '/<%=source.Entity%>/Update' },
        del: { method: 'DELETE', url: '/<%=source.Entity%>/Delete' },<%
		if(table != null) {%>
		loadByPrimaryKey: { method: 'GET', url: '/<%=source.Entity%>/<% 
		foreach(IColumn col in table.PrimaryKeys){%>{<%=col.ParameterName%>}<%}%>'}<%}%>
    };

    //#endregion
} (window.es, window.myNS));

(function (es) {

    es.objects.<%=source.Collection%> = es.defineCollection('<%=source.Collection%>', '<%=source.Entity%>');

    //#region Routing

    es.objects.<%=source.Collection%>.prototype.routes = {
        create: { method: 'PUT', url: '/<%=source.Collection%>/Create' },
        update: { method: 'POST', url: '/<%=source.Collection%>/Update' },
        del: { method: 'DELETE', url: '/<%=source.Collection%>/Delete' }
    };

    //#endregion
} (window.es));	
<%
// Write out the Service Interface
string filepath = source.Entity + ".js";
this.SaveToFile(filepath, output.ToString(), false);
this.ClearOutput();
}%>
<script runat="template">
private string SaveToFile(string fileName, string text, bool generateSingleFile)
{
	if(!generateSingleFile)
	{
	    string path = (string)esMeta.Input["OutputPath"];
	    
		string fname = path;
		if (!fname.EndsWith("\\")) 
			fname += "\\";
			
		Directory.CreateDirectory(path);		
		
		fname += fileName;
		
		using (StreamWriter sw = System.IO.File.CreateText(fname)) 
		{
			sw.Write(text);
		}
		
		return "";
	}
	else
	{
		return text;			
	}
}
</script>