<% 
/*
=========================================================================
	
	EntitySpaces 2010 
	Persistence Layer and Business Objects for Microsoft .NET 
	Copyright 2005 - 2010 EntitySpaces, LLC 
	EntitySpaces(TM) is a legal trademark of EntitySpaces, LLC 
	http://www.entityspaces.net 

	This template is bound by the EntitySpaces License Agreement which 
	is located here: 

	http://www.entityspaces.net/portal/License/tabid/97/Default.aspx
	
=========================================================================
*/
%>
<%@ TemplateInfo 
	UniqueID="7CE37C5B-536D-4057-BC6B-87015D3C451F" 
	UserInterfaceID="60C6D790-E5BE-4634-B168-A89EC6965F45"
	Title="entityspaces.js POJO's"   
	Description="The Custom Master Template" 
	Namespace="EntitySpaces.JavaScript" 
	Author="EntitySpaces, LLC"
	Version="2011.0.0.0"
	RequiresUI="True" %>
<%
string outputDirectory = (string)esMeta.Input["OutputPath"];

string upToPrefix = "";
if(esMeta.esPlugIn.UseUpToPrefix)
{
	upToPrefix = esMeta.esPlugIn.sUpToPrefix;
}

//===============================================================
// Execute our SubTemplates ....
//===============================================================
//System.Diagnostics.Debugger.Break();

ITable table = null;
IView  view  = null;

ArrayList entities = esMeta.Input["Entities"] as ArrayList;
string entityType = (string)esMeta.Input["EntityType"];
string databaseName = (string)esMeta.Input["Database"];
bool SelectedTablesOnly = true; //(bool)esMeta.Input["GenerateHierarchicalModelSelectedTablesOnly"];

IDatabase database = esMeta.Databases[databaseName];
	
foreach(string tableOrView in entities)
{
	if(entityType == EntitySpaces.MetadataEngine.dbEntityType.Tables.ToString())
	{
		table = database.Tables[tableOrView];
		
		esMeta.Input["View"] = null;
		esMeta.Input["Table"] = table;
		esMeta.Input["Columns"] = table.Columns;
	}
	else 
	{
		view = database.Views[tableOrView];
		
		esMeta.Input["Table"] = null;
		esMeta.Input["View"] = view;	
		esMeta.Input["Columns"] = view.Columns;
	}
	
	esPluginSource source = new esPluginSource(esMeta, table, view);
	esMeta.Input["Source"] = source;
	
	//----------------------------------------
	// Begin actual template execution
	//----------------------------------------	
	string path = this.Template.Header.FilePath;%>
(function (es) { //myNS = "myNameSpace" ... for example purposes

	if (typeof (es) === undefined) {
		throw "Please Load EntitySpaces.Core First";
	}

	es.objects.<%=source.Entity%> = es.defineEntity(function () {

		// core columns<% 
	foreach(IColumn col in source.Columns)
	{
		if(!col.IsConcurrency && ! col.IsEntitySpacesConcurrency) {%>
		this.<%=col.PropertyName%> = ko.observable();<%} else {%>
		this.<%=col.PropertyName%>;<%}}%>

		// extended colulmns
		this.esExtendedData;

<%if(table != null) {%>
		// Hierarchical Properties<%
		ArrayList list = GetHierarchicalProperties(table, entities, SelectedTablesOnly, upToPrefix);
		foreach(HierarchicalProperty prop in list) {%>
		this.<%=prop.theName%>;<%}
		}%>

		this.esTypeDefs = {<%if(table != null) {
		ArrayList list = GetHierarchicalProperties(table, entities, SelectedTablesOnly, upToPrefix);
		for(int i = 0; i < list.Count; i++) {
			HierarchicalProperty prop = (HierarchicalProperty)list[i];%>
			<%=prop.theName%>: "<%=prop.theType%>"<%=i < (list.Count - 1) ? "," : ""%><%}}%>
		};
	});

	//#region Routing

	es.objects.<%=source.Entity%>.prototype.routes = {
		commit: { method: 'PUT', url: '<%=source.Entity%>_Save', response: 'entity' }<%if(table != null) {%>,
		loadByPrimaryKey: { method: 'GET', url: '<%=source.Entity%>_LoadByPrimaryKey', response: 'entity', synchronous: true }<%}%>
	};

	//#endregion
}(window.es, window.myNS));

(function (es) {

	es.objects.<%=source.Collection%> = es.defineCollection('<%=source.Collection%>', '<%=source.Entity%>');

	//#region Routing

	es.objects.<%=source.Collection%>.prototype.routes = {
		commit: { method: 'PUT', url: '<%=source.Collection%>_Save', response: 'collection' },
		loadAll: { method: 'GET', url: '<%=source.Collection%>_LoadAll', response: 'collection', synchronous: true }
	};

	//#endregion
}(window.es));
<%
// Write out the Service Interface
string filepath = source.Entity + ".js";
this.SaveToFile(filepath, output.ToString(), false);
this.ClearOutput();
}%>
<script runat="template">

private string SaveToFile(string fileName, string text, bool generateSingleFile)
{
	if(!generateSingleFile)
	{
		string path = (string)esMeta.Input["OutputPath"];
		
		string fname = path;
		if (!fname.EndsWith("\\")) 
			fname += "\\";
			
		Directory.CreateDirectory(path);		
		
		fname += fileName;
		
		using (StreamWriter sw = System.IO.File.CreateText(fname)) 
		{
			sw.Write(text);
		}
		
		return "";
	}
	else
	{
		return text;			
	}
}

public class HierarchicalProperty
{
	public HierarchicalProperty(string type, string name)
	{
		this.theType = type;
		this.theName = name;
	}
	
	public string theType;
	public string theName;
}

private bool HasAutoIncrement(EntitySpaces.MetadataEngine.ITable table)
{
	EntitySpaces.MetadataEngine.IColumn col = table.PrimaryKeys[0];
	EntitySpaces.MetadataEngine.IPropertyCollection props = table.Properties;
	
	if(col.IsAutoKey)
	{
		return true;
	}
	
	switch(esMeta.DriverString)
	{
		case "ORACLE":
			EntitySpaces.MetadataEngine.IProperty prop = props["AUTOKEY:" + col.Name];
			if(prop != null)
			{
				return true;
			}
			break;
		
		case "SQL":
			if(col.HasDefault && col.Default == "(newid())")
			{
				return true;
			}
			break;
			
		default:
			break;
	}
	
	return false;
}

private bool IsBinaryManyToMany(EntitySpaces.MetadataEngine.TableRelation tr)
{
	if(tr.IsManyToMany)
	{
		if(tr.ForeignTable.PrimaryKeys.Count == 2)
		{
			return true;
		}
		
		if(tr.ForeignTable.ForeignKeys.Count == 2)
		{
			return true;
		}
	}
	
	return false;
}

private ArrayList GetHierarchicalProperties(ITable table, ArrayList entities, bool selectedTablesOnly, string upToPrefix)
{
	ArrayList hierarchicalProperties = new ArrayList();

	foreach(IForeignKey fk in table.ForeignKeys )
	{
		EntitySpaces.MetadataEngine.TableRelation tr = new EntitySpaces.MetadataEngine.TableRelation(table, fk);
		
		if(selectedTablesOnly)
		{
			if(!entities.Contains(tr.PrimaryTable.FullName) || !entities.Contains(tr.ForeignTable.FullName))
			{
				continue;
			}
		}

		// One to One with primary table
		if(tr.IsOneToOne && !tr.IsDirect)
		{
			string objName = esMeta.esPlugIn.EntityRelationName(tr.ForeignTable);
			
			// HERE
			hierarchicalProperties.Add(new HierarchicalProperty(esMeta.esPlugIn.Entity(tr.ForeignTable.Name), objName));
		}
		// One to One with foreign table
		if(tr.IsOneToOne && tr.IsDirect)
		{
			string objName = upToPrefix + esMeta.esPlugIn.EntityRelationName(tr.ForeignTable);
			
			// HERE
			hierarchicalProperties.Add(new HierarchicalProperty(esMeta.esPlugIn.Entity(tr.ForeignTable.Name), objName));
		}
		// Many to Many
		if ((IsBinaryManyToMany(tr) && !selectedTablesOnly) ||
			(IsBinaryManyToMany(tr) && selectedTablesOnly && 
			 entities.Contains(tr.CrossReferenceTable.FullName)))
		{
			string objName = upToPrefix + esMeta.esPlugIn.CollectionRelationName(tr.CrossReferenceTable, tr.ForeignTable);
			string manyName = esMeta.esPlugIn.CollectionRelationName(tr.PrimaryTable, tr.ForeignTable);
			
			// HERE
			hierarchicalProperties.Add(new HierarchicalProperty(esMeta.esPlugIn.Collection(tr.CrossReferenceTable.Name), objName));				
		}
		// Zero to Many
		if(tr.IsZeroToMany)
		{
			string objName = "";
			if(tr.IsSelfReference)
			{
				objName = esMeta.esPlugIn.CollectionRelationName(tr.ForeignTable, tr.PrimaryColumns[0], tr.IsSelfReference);
			}
			else
			{
				objName = esMeta.esPlugIn.CollectionRelationName(tr.ForeignTable, tr.ForeignColumns[0], tr.IsSelfReference);
			}
			
			// HERE
			hierarchicalProperties.Add(new HierarchicalProperty(esMeta.esPlugIn.Collection(tr.ForeignTable.Name), objName));				
		}
		// Many to One
		if(tr.IsManyToOne)
		{
			string objName = upToPrefix + esMeta.esPlugIn.EntityRelationName(tr.ForeignTable, tr.PrimaryColumns[0], tr.IsSelfReference);
			
			// HERE
			hierarchicalProperties.Add(new HierarchicalProperty(esMeta.esPlugIn.Entity(tr.ForeignTable.Name), objName));				
		}
	}

	return hierarchicalProperties;
}
</script>